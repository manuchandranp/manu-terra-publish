name: "Artifactory Generic OIDC Multi-Job"
on:
 workflow_dispatch:
 push:
# branches:
# - feature/*
env:
 OIDC_PROVIDER: 'manu-new'
 OIDC_AUDIENCE: 'newmanu'
 JF_URL: "https://hts2.jfrog.io"

permissions:
 contents: read
 id-token: write

jobs:
 download-artifact:
  runs-on: ubuntu-latest
# Define the job output using the step's new output method
  outputs:
   access_token: ${{ steps.exchange_token.outputs.ACCESS_TOKEN }}

  steps:
  - name: Checkout Repository
    uses: actions/checkout@v4
    
  - name: Fetch OIDC Token (Setup CLI)
    id: fetch_oidc_token
    uses: jfrog/setup-jfrog-cli@v4
    env:
      JF_URL: ${{ env.JF_URL }}
    with:
      oidc-provider-name: ${{ env.OIDC_PROVIDER }}
      oidc-audience: ${{ env.OIDC_AUDIENCE }}
      
  - name: Get ID Token
    id: get_id_token
    run: |
      # Request ID token scoped for GitHub actions
      ID_TOKEN=$(curl -sLS -H "User-Agent: actions/oidc-client" -H "Authorization: Bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" \
      "${ACTIONS_ID_TOKEN_REQUEST_URL}&audience=github" | jq .value | tr -d '"')
      echo "ID_TOKEN=${ID_TOKEN}" >> $GITHUB_ENV
      
  - name: Exchange token with access
    id: exchange_token  # ID for this step
    env:
      ID_TOKEN: ${{ env.ID_TOKEN }}
    run: |
      # Use JF_URL from environment to call the Access API
      ACCESS_TOKEN=$(curl -XPOST -H "Content-Type: application/json" "${{ env.JF_URL }}/access/api/v1/oidc/token" -d "{\"grant_type\": \"urn:ietf:params:oauth:grant-type:token-exchange\", \"subject_token_type\":\"urn:ietf:params:oauth:token-type:id_token\", \"subject_token\": \"${ID_TOKEN}\", \"provider_name\": \"${{ env.OIDC_PROVIDER }}\"}" | jq .access_token | tr -d '"')
      
      # CRITICAL FIX: Use $GITHUB_OUTPUT to set step output for cross-job use
      echo "ACCESS_TOKEN=${ACCESS_TOKEN}" >> $GITHUB_OUTPUT
      echo "Access token generated successfully."

#Job to initialize Terraform and resolve modules from Artifactory
 terraform-init-and-plan:
  needs: download-artifact
  runs-on: ubuntu-latest
  steps:
   - name: Checkout Repository
     uses: actions/checkout@v4

   - name: Create main.tf for Artifactory Module Source
     run: |
      # Creates a mock main.tf file for demonstration
      cat << EOF > main.tf
      terraform {
        required_providers {
          aws = {
            source  = "hashicorp/aws"
            version = "~> 5.0"
          }
        }
      }
        module "vpc" {
          source  = "https://${{ env.JF_URL }}/artifactory/manu-terra-module__myorg/vpc/aws"
          # Terraform module source must include 'https://'
        }
      EOF
      
      echo "--- main.tf content ---"
      cat main.tf
      
   - name: Setup Terraform
     uses: hashicorp/setup-terraform@v2
     with:
      terraform_version: 1.5.0 # Specify your desired version
      
   - name: Configure Artifactory Credentials via tfrc.json
     env:
      # Retrieve the token output from the previous job
      ACCESS_TOKEN: ${{ needs.download-artifact.outputs.access_token }}
      JF_URL: ${{ env.JF_URL }}
     run: |
      # 1. Create the .terraform.d directory
      mkdir -p ~/.terraform.d
      
      # 2. Define the credentials file path
      CREDENTIALS_FILE="$HOME/.terraform.d/credentials.tfrc.json"
      
      # 3. Create the JSON content, injecting the token
      cat << EOF > ${CREDENTIALS_FILE}
      {
        "credentials": {
          "${{ env.JF_URL }}": {
            "token": "${{ env.ACCESS_TOKEN }}"
          }
        }
      }
      EOF
      
      echo "--- credentials.tfrc.json content ---"
      cat $HOME/.terraform.d/credentials.tfrc.json
      echo "Successfully configured Artifactory token in ${CREDENTIALS_FILE}"
      
   - name: Initialize Terraform
    # terraform init will now use the token in tfrc.json to authenticate against Artifactory
     run: |
       terraform init
